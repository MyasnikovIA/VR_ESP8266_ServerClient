<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MPU6050 Sensor Data Monitor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .status {
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 5px;
            font-weight: bold;
        }
        .connected { background: #d4edda; color: #155724; }
        .disconnected { background: #f8d7da; color: #721c24; }
        .sensors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .sensor-card {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #3498db;
        }
        .sensor-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .sensor-name {
            font-weight: bold;
            font-size: 1.1em;
            color: #2c3e50;
        }
        .sensor-status {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        .active { background: #d4edda; color: #155724; }
        .inactive { background: #f8d7da; color: #721c24; }
        .angle-display {
            margin: 10px 0;
        }
        .angle-label {
            font-weight: bold;
            color: #555;
        }
        .angle-value {
            float: right;
            font-family: monospace;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #ecf0f1;
            border-radius: 10px;
            margin-top: 5px;
            overflow: hidden;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3498db, #2980b9);
            transition: width 0.3s ease;
        }
        .connection-info {
            background: #34495e;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .log-container {
            background: #2c3e50;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎯 MPU6050 Sensor Data Monitor</h1>
            <p>Real-time orientation data from multiple sensors</p>
        </div>

        <div class="connection-info">
            <div>WebSocket Status: <span id="wsStatus">Disconnected</span></div>
            <div>Active Sensors: <span id="sensorCount">0</span></div>
            <div>Server Time: <span id="serverTime">-</span></div>
        </div>

        <div id="status" class="status disconnected">
            🔴 Disconnected from server
        </div>

        <div id="sensorsList" class="sensors-grid">
            <!-- Sensors will be dynamically added here -->
        </div>

        <div class="log-container">
            <div><strong>Connection Log:</strong></div>
            <div id="log"></div>
        </div>
    </div>

    <script>
        class SensorMonitor {
            constructor() {
                this.ws = null;
                this.sensors = new Map();
                this.reconnectInterval = 3000;
                this.init();
            }

            init() {
                this.connect();
                this.startServerTimeUpdate();
            }

            connect() {
                try {
                    // Подключение к WebSocket серверу ESP8266
                    this.ws = new WebSocket('ws://192.168.4.1:81');
                    
                    this.ws.onopen = () => {
                        this.updateStatus('🟢 Connected to sensor server', true);
                        this.log('WebSocket connected successfully');
                        console.log('WebSocket connected');
                    };

                    this.ws.onmessage = (event) => {
                        this.handleMessage(event.data);
                    };

                    this.ws.onclose = () => {
                        this.updateStatus('🔴 Disconnected from server', false);
                        this.log('WebSocket disconnected, attempting to reconnect...');
                        console.log('WebSocket disconnected');
                        setTimeout(() => this.connect(), this.reconnectInterval);
                    };

                    this.ws.onerror = (error) => {
                        console.error('WebSocket error:', error);
                        this.updateStatus('🔴 Connection error', false);
                        this.log('WebSocket connection error');
                    };

                } catch (error) {
                    console.error('Connection failed:', error);
                    this.log('Connection failed: ' + error.message);
                    setTimeout(() => this.connect(), this.reconnectInterval);
                }
            }

            handleMessage(data) {
                try {
                    // Пытаемся парсить как JSON
                    const parsedData = JSON.parse(data);
                    this.processJSONMessage(parsedData);
                } catch (error) {
                    // Если не JSON, обрабатываем как текстовое сообщение
                    this.processTextMessage(data);
                }
            }

            processJSONMessage(data) {
                switch(data.type) {
                    case 'sensor_list':
                        this.updateSensorList(data.sensors);
                        this.log('Received sensor list: ' + data.sensors.join(', '));
                        break;
                    case 'sensor_data':
                        this.updateSensorData(data);
                        this.log('Sensor data update: ' + data.sensor);
                        break;
                    default:
                        console.log('Unknown message type:', data);
                        this.log('Unknown message type received');
                }
            }

            processTextMessage(message) {
                this.log('Server message: ' + message);
                // Можно добавить обработку специфичных текстовых команд
                if (message.includes('Connected')) {
                    this.log('Successfully authenticated with server');
                }
            }

            updateSensorList(sensorNames) {
                document.getElementById('sensorCount').textContent = sensorNames.length;
                
                // Добавляем новые датчики
                sensorNames.forEach(name => {
                    if (!this.sensors.has(name)) {
                        this.addSensor(name);
                    }
                });

                // Помечаем отсутствующие датчики как неактивные
                this.sensors.forEach((sensor, name) => {
                    if (!sensorNames.includes(name)) {
                        this.markSensorInactive(name);
                    }
                });
            }

            addSensor(name) {
                this.sensors.set(name, {
                    element: this.createSensorElement(name),
                    lastUpdate: Date.now(),
                    active: true
                });
                this.log('New sensor detected: ' + name);
            }

            createSensorElement(name) {
                const grid = document.getElementById('sensorsList');
                const card = document.createElement('div');
                card.className = 'sensor-card';
                card.id = `sensor-${name}`;
                card.innerHTML = `
                    <div class="sensor-header">
                        <div class="sensor-name">${name}</div>
                        <div class="sensor-status active">ACTIVE</div>
                    </div>
                    <div class="angle-display">
                        <div class="angle-label">Pitch: <span class="angle-value" id="${name}-pitch">0.00°</span></div>
                        <div class="progress-bar"><div class="progress-fill" id="${name}-pitch-bar" style="width: 50%"></div></div>
                    </div>
                    <div class="angle-display">
                        <div class="angle-label">Roll: <span class="angle-value" id="${name}-roll">0.00°</span></div>
                        <div class="progress-bar"><div class="progress-fill" id="${name}-roll-bar" style="width: 50%"></div></div>
                    </div>
                    <div class="angle-display">
                        <div class="angle-label">Yaw: <span class="angle-value" id="${name}-yaw">0.00°</span></div>
                        <div class="progress-bar"><div class="progress-fill" id="${name}-yaw-bar" style="width: 50%"></div></div>
                    </div>
                    <div style="margin-top: 10px; font-size: 0.8em; color: #666;">
                        Last update: <span id="${name}-time">Just now</span>
                    </div>
                `;
                grid.appendChild(card);
                return card;
            }

            updateSensorData(data) {
                const sensor = this.sensors.get(data.sensor);
                if (sensor) {
                    sensor.lastUpdate = Date.now();
                    sensor.active = true;
                    
                    // Обновляем значения углов
                    this.updateAngleDisplay(data.sensor, 'pitch', data.pitch);
                    this.updateAngleDisplay(data.sensor, 'roll', data.roll);
                    this.updateAngleDisplay(data.sensor, 'yaw', data.yaw);
                    
                    // Обновляем время
                    document.getElementById(`${data.sensor}-time`).textContent = 
                        new Date().toLocaleTimeString();
                    
                    // Обновляем статус
                    const statusElement = sensor.element.querySelector('.sensor-status');
                    statusElement.className = 'sensor-status active';
                    statusElement.textContent = 'ACTIVE';
                }
            }

            updateAngleDisplay(sensorName, axis, value) {
                const valueElement = document.getElementById(`${sensorName}-${axis}`);
                const barElement = document.getElementById(`${sensorName}-${axis}-bar`);
                
                if (valueElement && barElement) {
                    valueElement.textContent = `${value.toFixed(2)}°`;
                    
                    // Обновляем прогресс-бар (нормализуем от -180 до 180 до 0-100%)
                    const normalizedValue = Math.max(0, Math.min(100, ((value + 180) / 360) * 100));
                    barElement.style.width = `${normalizedValue}%`;
                }
            }

            markSensorInactive(name) {
                const sensor = this.sensors.get(name);
                if (sensor) {
                    sensor.active = false;
                    const statusElement = sensor.element.querySelector('.sensor-status');
                    statusElement.className = 'sensor-status inactive';
                    statusElement.textContent = 'INACTIVE';
                    this.log('Sensor inactive: ' + name);
                }
            }

            updateStatus(message, isConnected) {
                const statusElement = document.getElementById('status');
                statusElement.textContent = message;
                statusElement.className = `status ${isConnected ? 'connected' : 'disconnected'}`;
                document.getElementById('wsStatus').textContent = 
                    isConnected ? 'Connected' : 'Disconnected';
            }

            log(message) {
                const logElement = document.getElementById('log');
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.textContent = `[${timestamp}] ${message}`;
                logElement.appendChild(logEntry);
                
                // Автопрокрутка к последнему сообщению
                logElement.scrollTop = logElement.scrollHeight;
                
                // Ограничение количества сообщений в логе
                if (logElement.children.length > 50) {
                    logElement.removeChild(logElement.firstChild);
                }
            }

            startServerTimeUpdate() {
                setInterval(() => {
                    document.getElementById('serverTime').textContent = 
                        new Date().toLocaleTimeString();
                }, 1000);
            }
        }

        // Запуск монитора при загрузке страницы
        document.addEventListener('DOMContentLoaded', () => {
            window.sensorMonitor = new SensorMonitor();
        });
    </script>
</body>
</html>